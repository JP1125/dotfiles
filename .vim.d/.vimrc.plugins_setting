"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" MiniBufExplorer
"------------------------------------
"set minibfexp
let g:miniBufExplMapWindowNavVim=1 "hjklで移動
let g:miniBufExplSplitBelow=0  " Put new window above
let g:miniBufExplMapWindowNavArrows=1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplSplitToEdge=1
let g:miniBufExplMaxSize = 10

":MtでMiniBufExplorerの表示トグル
command! Mt :TMiniBufExplorer

"------------------------------------
" Align
"------------------------------------
" Alignを日本語環境で使用するための設定
let g:Align_xstrlen = 3

"------------------------------------
" VTreeExplorer
"------------------------------------
" 縦に表示する
"let g:treeExplVertical=1

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" コメントの間にスペースを空ける
"let NERDSpaceDelims = 1
"<Leader>xでコメントをトグル(NERD_commenter.vim)
"map <Leader>x, c<space>
""未対応ファイルタイプのエラーメッセージを表示しない
"let NERDShutUp=1

" ------------------------------------
" grep.vim
"------------------------------------
" 検索外のディレクトリ、ファイルパターン
"let Grep_Skip_Dirs = '.svn .git .hg'
"let Grep_Skip_Files = '*.bak *~'

"------------------------------------
" surround.vim TODO
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
"nmap s <Plug>Ysurround
"nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
"let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" BufExplorer
"------------------------------------
"<Leader>l<Space>でBufferList
"nnoremap <Leader>l<Space> :BufExplorer<CR>

"------------------------------------
" taglist.Vim TODO
"------------------------------------
" 関数一覧
"set tags=tags
"set tags+=~/.tags
"let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
"let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
"let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
"let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
"let Tlist_Auto_Update = 1
"let Tlist_WinWidth = 30
"map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
"nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
"nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>

"------------------------------------
" Srcexp
"------------------------------------
" [Srcexpl] tagsを利用したソースコード閲覧・移動補助機能
"let g:SrcExpl_UpdateTags    = 1         " tagsをsrcexpl起動時に自動で作成（更新）
"let g:SrcExpl_RefreshTime   = 0         " 自動表示するまでの時間(0:off)
"let g:SrcExpl_WinHeight     = 9         " プレビューウインドウの高さ
"let g:SrcExpl_RefreshMapKey = "<Space>" " 手動表示のMAP
"let g:SrcExpl_GoBackMapKey  = "<C-b>"   " 戻る機能のMAP
" Source Explorerの機能ON/OFF
" nmap <F8> :CMiniBufExplorer<CR>:SrcExplToggle<CR>:TMiniBufExplorer<CR>

"------------------------------------
" errormarker.vim
"------------------------------------
" disable default shortcut mapping and re-define to <Leader>ec
let g:errormarker_disablemappings = 1
nmap <silent> <unique> <Leader>ec :ErrorAtCursor<CR>

"------------------------------------
" vimshell
"------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
"let g:vimshell_right_prompt = 'vimshell#vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
let g:vimshell_enable_smart_case = 1

if has('win32') || has('win64')
  " Display user name on Windows.
  let g:vimshell_prompt = $USERNAME."% "
else
  " Display user name on Linux.
  let g:vimshell_prompt = $USER."% "

  call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
  call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
  let g:vimshell_execute_file_list['zip'] = 'zipinfo'
  call vimshell#set_execute_file('tgz,gz', 'gzcat')
  call vimshell#set_execute_file('tbz,bz2', 'bzcat')
endif

command! Vs :VimShell

"------------------------------------
" unite.vim
"------------------------------------
" 全部乗せ
nnoremap ,ua :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap ,uf :<C-u>Unite -no-split -buffer-name=files file<CR>
" バッファ一覧
nnoremap ,ub :<C-u>Unite -no-split buffer<CR>
" 最近使用したファイル一覧
nnoremap ,um :<C-u>Unite -no-split file_mru<CR>
" 常用セット
nnoremap ,uu :<C-u>Unite buffer file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap ,ud :<C-u>UniteWithCurrentDir -no-split file<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>
,
"------------------------------------
" quickrun.vim
"------------------------------------
"let g:quickrun_config = {}
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
let g:quickrun_config = {'*': {'split': ''}}
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config['rspec/bundle'] = {
  \ 'type': 'rspec/bundle',
  \ 'command': "rspec",
  \ 'cmdopt': "-l %{line('.')}",
  \ 'exec': "bundle exec %c %o %s ",
  \ 'filetype': 'rspec-result'
  \}
let g:quickrun_config['rspec/normal'] = {
  \ 'type': 'rspec/normal',
  \ 'command': "rspec",
  \ 'cmdopt': "-l %{line('.')}",
  \ 'exec': '%c %o %s',
  \ 'filetype': 'rspec-result'
  \}
function! RSpecQuickrun()
  let b:quickrun_config = {'type' : 'rspec/bundle'}
endfunction
autocmd BufReadPost *_spec.rb call RSpecQuickrun()

let g:quickrun_config['markdown'] = {
			\ 'command': 'pandoc',
			\ 'exec': ['%c -s -f markdown -t html -o %s:p:r.html %s', 'open %s:p:r.html', 'sleep 1', 'rm %s:p:r.html'],
			\ 'tempfile': '{tempname()}.md'
			\ }

"------------------------------------
" Pydiction
"------------------------------------
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

"------------------------------------
" Syntastic
"------------------------------------
" エラー行をsignで表示する
"let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
"let g:syntastic_enable_highlighting = 1

"------------------------------------
"" VimFiler
"------------------------------------
let g:vimfiler_as_default_explorer=1
let g:vimfiler_safe_mode_by_default=0
nnoremap ,ff :<C-u>VimFiler -split -simple -no-quit<CR>
nnoremap ,fi :<C-u>VimFiler -split -simple -winwidth=35 -no-quit<CR>

"------------------------------------
"" twitvim
"------------------------------------
let twitvim_count = 100
nnoremap ,tf :<C-u>FriendsTwitter<CR><C-w>j
nnoremap ,tn :<C-u>NextTwitter<CR>

autocmd FileType twitvim call s:twitvim_my_settings()
function! s:twitvim_my_settings()
    set nowrap
endfunction
